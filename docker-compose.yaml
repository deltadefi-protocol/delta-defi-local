services:
  redis:
    container_name: redis
    hostname: redis
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:15.3
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: deltadefi
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  questdb:
    container_name: questdb
    hostname: questdb
    image: questdb/questdb:latest
    ports:
      - "9000:9000"
      - "8812:8812"
    environment:
      QDB_AUTH_USER: admin
      QDB_AUTH_PASSWORD: quest
      QDB_HTTP_PORT: 9000
      QDB_TCP_PORT: 8812
      QDB_INGESTION_PORT: 9000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9000/", "||", "exit", "1"]
      interval: 10s
      timeout: 5s
      retries: 5

  cardano-node:
    image: ghcr.io/intersectmbo/cardano-node:10.4.1
    volumes:
      - ./devnet:/devnet
    environment:
      - CARDANO_BLOCK_PRODUCER=true
      - CARDANO_SOCKET_PATH=/devnet/node.socket # used by cardano-node
      - CARDANO_NODE_SOCKET_PATH=/devnet/node.socket # used by cardano-cli
    command:
      [
        "run",
        "--config",
        "/devnet/cardano-node.json",
        "--topology",
        "/devnet/topology.json",
        "--database-path",
        "/devnet/db",
        "--shelley-kes-key",
        "/devnet/kes.skey",
        "--shelley-vrf-key",
        "/devnet/vrf.skey",
        "--shelley-operational-certificate",
        "/devnet/opcert.cert",
        "--byron-delegation-certificate",
        "/devnet/byron-delegation.cert",
        "--byron-signing-key",
        "/devnet/byron-delegate.key",
      ]

  kupo:
    image: cardanosolutions/kupo:v2.11.0
    volumes:
      - ./devnet:/devnet
    ports:
      - "1442:1442"
    command:
      [
        "--prune-utxo",
        "--host",
        "0.0.0.0",
        "--node-socket",
        "/devnet/node.socket",
        "--node-config",
        "/devnet/cardano-node.json",
        "--workdir",
        "/devnet/kupo/db",
        "--since",
        "origin",
        "--match",
        "*",
      ]

  ogmios:
    image: cardanosolutions/ogmios:v6.13.0
    volumes:
      - ./devnet:/devnet
    ports:
      - "1337:1337"
    command:
      [
        "--host",
        "0.0.0.0",
        "--port",
        "1337",
        "--node-socket",
        "/devnet/node.socket",
        "--node-config",
        "/devnet/cardano-node.json",
      ]

  hydra-node-1:
    # NOTE: Make sure to use the same image in ./seed-devnet.sh
    image: ghcr.io/cardano-scaling/hydra-node:0.22.2
    volumes:
      - ./devnet:/devnet
    ports:
      - "4001:4001"
      - "5001:5001"
    command:
      [
        "--node-id",
        "1",
        "--api-host",
        "0.0.0.0",
        "--listen",
        "172.16.239.10:5001",
        "--monitoring-port",
        "6001",
        "--peer",
        "172.16.239.20:5001",
        "--peer",
        "172.16.239.30:5001",
        "--peer",
        "172.16.239.40:5001",
        "--hydra-scripts-tx-id",
        "${HYDRA_SCRIPTS_TX_ID}",
        "--hydra-signing-key",
        "/devnet/credentials/alice-hydra.sk",
        "--hydra-verification-key",
        "/devnet/credentials/bob-hydra.vk",
        "--hydra-verification-key",
        "/devnet/credentials/charlie-hydra.vk",
        "--hydra-verification-key",
        "/devnet/credentials/david-hydra.vk",
        "--cardano-signing-key",
        "/devnet/credentials/alice-node.sk",
        "--cardano-verification-key",
        "/devnet/credentials/bob-node.vk",
        "--cardano-verification-key",
        "/devnet/credentials/charlie-node.vk",
        "--cardano-verification-key",
        "/devnet/credentials/david-node.vk",
        "--ledger-protocol-parameters",
        "/devnet/protocol-parameters.json",
        "--testnet-magic",
        "42",
        "--node-socket",
        "/devnet/node.socket",
        "--persistence-dir",
        "/devnet/persistence/alice",
        "--contestation-period",
        "3s",
      ]
    networks:
      hydra_net:
        ipv4_address: 172.16.239.10
    restart: always

  hydra-node-2:
    # NOTE: Make sure to use the same image in ./seed-devnet.sh
    image: ghcr.io/cardano-scaling/hydra-node:0.22.2
    volumes:
      - ./devnet:/devnet
    ports:
      - "4002:4001"
      - "5002:5001"
    command:
      [
        "--node-id",
        "2",
        "--api-host",
        "0.0.0.0",
        "--listen",
        "172.16.239.20:5001",
        "--monitoring-port",
        "6001",
        "--peer",
        "172.16.239.10:5001",
        "--peer",
        "172.16.239.30:5001",
        "--peer",
        "172.16.239.40:5001",
        "--hydra-scripts-tx-id",
        "${HYDRA_SCRIPTS_TX_ID}",
        "--hydra-signing-key",
        "/devnet/credentials/bob-hydra.sk",
        "--hydra-verification-key",
        "/devnet/credentials/alice-hydra.vk",
        "--hydra-verification-key",
        "/devnet/credentials/charlie-hydra.vk",
        "--hydra-verification-key",
        "/devnet/credentials/david-hydra.vk",
        "--cardano-signing-key",
        "/devnet/credentials/bob-node.sk",
        "--cardano-verification-key",
        "/devnet/credentials/alice-node.vk",
        "--cardano-verification-key",
        "/devnet/credentials/charlie-node.vk",
        "--cardano-verification-key",
        "/devnet/credentials/david-node.vk",
        "--ledger-protocol-parameters",
        "/devnet/protocol-parameters.json",
        "--testnet-magic",
        "42",
        "--node-socket",
        "/devnet/node.socket",
        "--persistence-dir",
        "/devnet/persistence/bob",
        "--contestation-period",
        "3s",
      ]
    networks:
      hydra_net:
        ipv4_address: 172.16.239.20
    restart: always

  hydra-node-3:
    # NOTE: Make sure to use the same image in ./seed-devnet.sh
    image: ghcr.io/cardano-scaling/hydra-node:0.22.2
    build:
      target: hydra-node
    volumes:
      - ./devnet:/devnet
    ports:
      - "4003:4001"
      - "5003:5001"
    command:
      [
        "--node-id",
        "3",
        "--api-host",
        "0.0.0.0",
        "--listen",
        "172.16.239.30:5001",
        "--monitoring-port",
        "6001",
        "--peer",
        "172.16.239.10:5001",
        "--peer",
        "172.16.239.20:5001",
        "--peer",
        "172.16.239.40:5001",
        "--hydra-scripts-tx-id",
        "${HYDRA_SCRIPTS_TX_ID}",
        "--hydra-signing-key",
        "/devnet/credentials/charlie-hydra.sk",
        "--hydra-verification-key",
        "/devnet/credentials/alice-hydra.vk",
        "--hydra-verification-key",
        "/devnet/credentials/bob-hydra.vk",
        "--hydra-verification-key",
        "/devnet/credentials/david-hydra.vk",
        "--cardano-signing-key",
        "/devnet/credentials/charlie-node.sk",
        "--cardano-verification-key",
        "/devnet/credentials/alice-node.vk",
        "--cardano-verification-key",
        "/devnet/credentials/bob-node.vk",
        "--cardano-verification-key",
        "/devnet/credentials/david-node.vk",
        "--ledger-protocol-parameters",
        "/devnet/protocol-parameters.json",
        "--testnet-magic",
        "42",
        "--node-socket",
        "/devnet/node.socket",
        "--persistence-dir",
        "/devnet/persistence/charlie",
        "--contestation-period",
        "3s",
      ]
    networks:
      hydra_net:
        ipv4_address: 172.16.239.30
    restart: always

  hydra-node-4:
    # NOTE: Make sure to use the same image in ./seed-devnet.sh
    image: ghcr.io/cardano-scaling/hydra-node:0.22.2
    build:
      target: hydra-node
    volumes:
      - ./devnet:/devnet
    ports:
      - "4004:4001"
      - "5004:5001"
    command:
      [
        "--node-id",
        "4",
        "--api-host",
        "0.0.0.0",
        "--listen",
        "172.16.239.40:5001",
        "--monitoring-port",
        "6001",
        "--peer",
        "172.16.239.10:5001",
        "--peer",
        "172.16.239.20:5001",
        "--peer",
        "172.16.239.30:5001",
        "--hydra-scripts-tx-id",
        "${HYDRA_SCRIPTS_TX_ID}",
        "--hydra-signing-key",
        "/devnet/credentials/david-hydra.sk",
        "--hydra-verification-key",
        "/devnet/credentials/alice-hydra.vk",
        "--hydra-verification-key",
        "/devnet/credentials/bob-hydra.vk",
        "--hydra-verification-key",
        "/devnet/credentials/charlie-hydra.vk",
        "--cardano-signing-key",
        "/devnet/credentials/david-node.sk",
        "--cardano-verification-key",
        "/devnet/credentials/alice-node.vk",
        "--cardano-verification-key",
        "/devnet/credentials/bob-node.vk",
        "--cardano-verification-key",
        "/devnet/credentials/charlie-node.vk",
        "--ledger-protocol-parameters",
        "/devnet/protocol-parameters.json",
        "--testnet-magic",
        "42",
        "--node-socket",
        "/devnet/node.socket",
        "--persistence-dir",
        "/devnet/persistence/david",
        "--contestation-period",
        "3s",
      ]
    networks:
      hydra_net:
        ipv4_address: 172.16.239.40
    restart: always

  hydra-tui-1:
    image: ghcr.io/cardano-scaling/hydra-tui:0.22.2
    command:
      [
        "--connect",
        "172.16.239.10:4001",
        "--node-socket",
        "/devnet/node.socket",
        "--testnet-magic",
        "42",
        "--cardano-signing-key",
        "/devnet/credentials/alice-funds.sk",
      ]
    volumes:
      - ./devnet:/devnet
    networks:
      hydra_net:
        ipv4_address: 172.16.239.11

  hydra-tui-2:
    image: ghcr.io/cardano-scaling/hydra-tui:0.22.2
    command:
      [
        "--connect",
        "172.16.239.20:4001",
        "--node-socket",
        "/devnet/node.socket",
        "--testnet-magic",
        "42",
        "--cardano-signing-key",
        "/devnet/credentials/bob-funds.sk",
      ]
    volumes:
      - ./devnet:/devnet
    networks:
      hydra_net:
        ipv4_address: 172.16.239.21

  hydra-tui-3:
    image: ghcr.io/cardano-scaling/hydra-tui:0.22.2
    command:
      [
        "--connect",
        "172.16.239.30:4001",
        "--node-socket",
        "/devnet/node.socket",
        "--testnet-magic",
        "42",
        "--cardano-signing-key",
        "/devnet/credentials/charlie-funds.sk",
      ]
    volumes:
      - ./devnet:/devnet
    networks:
      hydra_net:
        ipv4_address: 172.16.239.31

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      hydra_net:
        ipv4_address: 172.16.239.5
  belvedere:
    build:
      context: ./belvedere
      dockerfile: Dockerfile
      args:
        GITHUB_TOKEN: your_access_token_here
    volumes:
      - ./mesh:/mesh
    ports:
      - "50051:50051"
    env_file:
      - ./env/.belvedere.env
    depends_on:
      - redis
      - ogmios
      - kupo

  espresso-api:
    build:
      context: ./espresso
      dockerfile: Dockerfile
      args:
        GITHUB_TOKEN: your_access_token_here
    ports:
      - "8080:8080"
    env_file:
      - ./env/.espresso.env
    depends_on:
      - redis
      - postgres
  espresso-worker:
    build:
      context: ./espresso
      dockerfile: Dockerfile
      args:
        GITHUB_TOKEN: your_access_token_here
    env_file:
      - ./env/.espresso.env
    depends_on:
      - redis
      - postgres
    command: ["./worker"]
  orderbook:
    build:
      context: ./orderbook
      dockerfile: Dockerfile
      args:
        GITHUB_TOKEN: your_access_token_here
    ports:
      - "50052:50052"
    env_file:
      - ./env/.orderbook.env
    depends_on:
      redis:
        condition: service_healthy
      questdb:
        condition: service_healthy
  tonic:
    build:
      context: ./tonic
      dockerfile: Dockerfile
      args:
        GITHUB_TOKEN: your_access_token_here
    env_file:
      - ./env/.tonic.env
    ports:
      - "50053:50053"
    depends_on:
      - redis
      - postgres
      - hydra-node-1
  hibiki:
    build:
      context: ./hibiki
      dockerfile: Dockerfile
      args:
        GITHUB_TOKEN: your_access_token_here
    env_file:
      - ./env/.hibiki.env
    ports:
      - "50062:50062"
    depends_on:
      - redis
      - postgres
  valve:
    build:
      context: ./valve
      dockerfile: Dockerfile
      args:
        GITHUB_TOKEN: your_access_token_here
    env_file:
      - ./env/.valve.env
    ports:
      - "9999:9999"
      - "9998:9998"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
  frontend:
    build:
      context: ./deltadefi-app-frontend
      dockerfile: Dockerfile
    env_file:
      - ./env/.deltadefi-app-frontend.env
    ports:
      - "3000:3000"
    depends_on:
      - redis
      - postgres
      - espresso-api
networks:
  hydra_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.239.0/24
          gateway: 172.16.239.1
